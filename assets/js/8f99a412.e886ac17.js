"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9777],{668:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Getting-Started/modern-cpp_standard-cpp","title":"Modern C++ and the C++ Standard","description":"Introduction","source":"@site/docs/01_Getting-Started/02_modern-cpp_standard-cpp.md","sourceDirName":"01_Getting-Started","slug":"/Getting-Started/modern-cpp_standard-cpp","permalink":"/CPP/docs/Getting-Started/modern-cpp_standard-cpp","draft":false,"unlisted":false,"editUrl":"https://github.com/CagriCatik/CPP/edit/main/docs/01_Getting-Started/02_modern-cpp_standard-cpp.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Importance of Learning C++","permalink":"/CPP/docs/Getting-Started/cpp"},"next":{"title":"Setting Up Development Environment","permalink":"/CPP/docs/Getting-Started/setup-vs-code"}}');var s=i(4848),t=i(8453);const a={},o="Modern C++ and the C++ Standard",d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Historical Overview",id:"historical-overview",level:2},{value:"Origins of C++",id:"origins-of-c",level:3},{value:"Standardization Milestones",id:"standardization-milestones",level:3},{value:"Classical vs. Modern C++",id:"classical-vs-modern-c",level:2},{value:"Classical C++ (Pre-C++11)",id:"classical-c-pre-c11",level:3},{value:"Modern C++ (C++11 and Beyond)",id:"modern-c-c11-and-beyond",level:3},{value:"Key Features of Modern C++",id:"key-features-of-modern-c",level:2},{value:"1. Memory Management with Smart Pointers",id:"1-memory-management-with-smart-pointers",level:3},{value:"2. Lambda Expressions",id:"2-lambda-expressions",level:3},{value:"3. Concurrency Support",id:"3-concurrency-support",level:3},{value:"4. Type Inference with <code>auto</code>",id:"4-type-inference-with-auto",level:3},{value:"5. Move Semantics (C++11)",id:"5-move-semantics-c11",level:3},{value:"6. Range-Based For Loops",id:"6-range-based-for-loops",level:3},{value:"Best Practices and Core Guidelines",id:"best-practices-and-core-guidelines",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"modern-c-and-the-c-standard",children:"Modern C++ and the C++ Standard"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:'C++ has evolved significantly since its inception, transitioning from "classical" paradigms to "modern" practices. This documentation outlines the history of C++, key milestones in its standardization, and the defining characteristics of modern C++.'}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"historical-overview",children:"Historical Overview"}),"\n",(0,s.jsx)(n.h3,{id:"origins-of-c",children:"Origins of C++"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"1970s"}),": Dennis Ritchie developed the ",(0,s.jsx)(n.strong,{children:"C programming language"})," at Bell Labs, closely tied to UNIX OS development."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"1979"}),": Bjarne Stroustrup began extending C with object-oriented features, initially naming it ",(0,s.jsx)(n.strong,{children:'"C with Classes"'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"1983"}),": Renamed to ",(0,s.jsx)(n.strong,{children:"C++"}),", reflecting the incremental (",(0,s.jsx)(n.code,{children:"++"}),") enhancements over C."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"1989"}),": First commercial release of C++."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"standardization-milestones",children:"Standardization Milestones"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"C++98"}),": The first ISO/IEC standard, introducing core features like the Standard Template Library (STL)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"C++03"}),": A minor update addressing ambiguities in C++98."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"C++11"}),": A transformative release, marking the start of ",(0,s.jsx)(n.strong,{children:"modern C++"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"C++14"})," and ",(0,s.jsx)(n.strong,{children:"C++17"}),": Incremental improvements building on C++11\u2019s foundation."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"classical-vs-modern-c",children:"Classical vs. Modern C++"}),"\n",(0,s.jsx)(n.h3,{id:"classical-c-pre-c11",children:"Classical C++ (Pre-C++11)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Focused on procedural and object-oriented programming."}),"\n",(0,s.jsx)(n.li,{children:"Manual memory management using raw pointers."}),"\n",(0,s.jsx)(n.li,{children:"Limited abstractions for concurrency and generic programming."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"modern-c-c11-and-beyond",children:"Modern C++ (C++11 and Beyond)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Introduces higher-level abstractions, safer practices, and enhanced productivity."}),"\n",(0,s.jsx)(n.li,{children:"Core philosophy: Simplify code while improving safety, performance, and maintainability."}),"\n",(0,s.jsx)(n.li,{children:'Bjarne Stroustrup describes it as "a new language" due to paradigm shifts.'}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"key-features-of-modern-c",children:"Key Features of Modern C++"}),"\n",(0,s.jsx)(n.h3,{id:"1-memory-management-with-smart-pointers",children:"1. Memory Management with Smart Pointers"}),"\n",(0,s.jsx)(n.p,{children:"Replaces error-prone raw pointers with automated memory management."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <memory>  \n// Unique pointer (exclusive ownership)  \nstd::unique_ptr<int> ptr = std::make_unique<int>(42);  \n\n// Shared pointer (shared ownership)  \nstd::shared_ptr<int> sharedPtr = std::make_shared<int>(10);  \n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-lambda-expressions",children:"2. Lambda Expressions"}),"\n",(0,s.jsx)(n.p,{children:"Enables inline anonymous functions for concise and flexible code."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"auto sum = [](int a, int b) { return a + b; };  \nstd::cout << sum(3, 4); // Output: 7  \n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-concurrency-support",children:"3. Concurrency Support"}),"\n",(0,s.jsx)(n.p,{children:"Native threading libraries for parallel execution."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>  \n#include <thread>  \n\nvoid task() {  \n    std::cout << "Hello from thread!\\n";  \n}  \n\nint main() {  \n    std::thread t(task);  \n    t.join();  \n    return 0;  \n}  \n'})}),"\n",(0,s.jsxs)(n.h3,{id:"4-type-inference-with-auto",children:["4. Type Inference with ",(0,s.jsx)(n.code,{children:"auto"})]}),"\n",(0,s.jsx)(n.p,{children:"Simplifies variable declarations by deducing types automatically."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'auto value = 5;          // int  \nauto name = "Modern C++"; // const char*  \n'})}),"\n",(0,s.jsx)(n.h3,{id:"5-move-semantics-c11",children:"5. Move Semantics (C++11)"}),"\n",(0,s.jsx)(n.p,{children:"Optimizes resource management by enabling efficient transfers of data."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"std::vector<int> vec1 = {1, 2, 3};  \nstd::vector<int> vec2 = std::move(vec1); // vec1 is now empty  \n"})}),"\n",(0,s.jsx)(n.h3,{id:"6-range-based-for-loops",children:"6. Range-Based For Loops"}),"\n",(0,s.jsx)(n.p,{children:"Simplifies iteration over containers."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'std::vector<int> nums = {1, 2, 3};  \nfor (const auto& num : nums) {  \n    std::cout << num << " ";  \n}  \n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-and-core-guidelines",children:"Best Practices and Core Guidelines"}),"\n",(0,s.jsx)(n.p,{children:"Modern C++ emphasizes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RAII (Resource Acquisition Is Initialization)"}),": Tie resource management to object lifetimes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use of Standard Library"}),": Prefer STL containers/algorithms over manual implementations."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type Safety"}),": Minimize explicit casts; use ",(0,s.jsx)(n.code,{children:"constexpr"})," for compile-time computations."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Avoid Undefined Behavior"}),": Leverage tools like ",(0,s.jsx)(n.code,{children:"static_assert"})," and smart pointers."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"The transition from classical to modern C++ (C++11 onward) represents a paradigm shift toward safer, more expressive, and efficient code. By adopting features like smart pointers, lambdas, and concurrency support, developers can write robust applications aligned with contemporary best practices. Understanding these standards ensures proficiency in both current and future C++ ecosystems."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var r=i(6540);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);